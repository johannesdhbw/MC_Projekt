
    /*
     *
     *                           .__  .__ __
     *  __ __  ______ ___________|  | |__|  | __ ____
     * |  |  \/  ___// __ \_  __ \  | |  |  |/ // __ \
     * |  |  /\___ \\  ___/|  | \/  |_|  |    <\  ___/
     * |____//____  >\___  >__|  |____/__|__|_ \\___  >
     *            \/     \/                   \/    \/
     *
     *
     * (c) 2019, Userlike - https://www.userlike.com
     *
     * Userlike Chat Client
     * Appkey:    a6861971-53fa-3a12-a46c-8c2bc0ea510e
     * Widgetkey: 02817ee1af2e0794a55620e4ceb131b13e5f2ed634d502e784ee2a970cc8c307
     * Created:   2020-03-20 21:04:29.695147+00:00
     *
     */
    
    (function (root, factory) {
      if (!(root.userlike && root.userlike._router) && (typeof define === 'function' && define.amd && (typeof require !== "function" || (typeof require === "function" &&
          typeof require.specified === "function" && require.specified('userlike-loader'))))) {

          return define('userlike-loader', function() {
            return factory.call(this, root, true);
          });
      } else {
        return factory.call(this, root, false).load();
      }
    }(window, function(root, tryRjs) {
      var options, api;
      if (tryRjs == null) { tryRjs = true; }
      root.userlike = root.userlike || {};
      root.userlike.loader = function(src) {
        var script;
        if (tryRjs) {
            try {
                require.config({
                    paths: { 'userlike': src.replace(/\.js$/, '') }
                });
                require(['userlike'], function(userlike) {});
                return true;
            } catch (e) {
                if (window.console && window.console.log) {
                    window.console.log("RequireJS failed to load userlike module");
                }
            }
        }
        script = document.createElement("script");
        script.setAttribute("type", "text/javascript");
        script.setAttribute("src", src);
        return document.getElementsByTagName("head")[0].appendChild(script);
      };
      return api = {
        options: {},
        configure: function(opt) {
          if (typeof opt === 'object') { api.options = opt; }
          return api;
        },
        load: function(opt) {
          api.configure(opt);
          if (root.userlike._config===undefined ) {
            root.userlike._config = {'app_key': 'a6861971-53fa-3a12-a46c-8c2bc0ea510e', 'widget_key': '02817ee1af2e0794a55620e4ceb131b13e5f2ed634d502e784ee2a970cc8c307', 'data': '', 'options': api.options};
            root.userlike.loader('https://dq4irj27fs462.cloudfront.net/javascripts/userlike-production-2010.min.js');
          }
          return root.userlike;
        }
      };
    }));
    